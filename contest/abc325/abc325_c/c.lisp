(let* ((h (read))
       (w (read))
       (swh (cons (make-string (+ w 2) :initial-element #\.)
                  (loop repeat h
                        collect (concatenate 'string "." (read-line) ".")))))
  (loop for i from 1 to h with cnt = 0
        for prev-sw = (nth (1- i) swh) 
        and this-sw = (nth i swh) 
        do (loop for j from 1 below (1- (length this-sw) ) 
                 do (let ((topl (elt prev-sw (1- j)))
                          (topm (elt prev-sw j))
                          (left (elt this-sw (1- j)))
                          (this (elt this-sw j)))
                      (and (char= this #\#) (incf cnt))
                      (decf cnt (max 0 (1- (count t (list (char= topl #\#) 
                                                          (char= topm #\#)
                                                          (char= left #\#)
                                                          (char= this #\#))))))))
           (format t "~a~%" cnt)
        finally (print cnt))
  )
