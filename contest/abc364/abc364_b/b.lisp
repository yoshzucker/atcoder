(let* ((h (read))
       (w (read))
       (si (read))
       (sj (read))
       (cwh (make-array (list h w)
                        :initial-contents
                        (loop repeat h collect (read-line))))
       (x (read-line)))
  (loop for c across x with i = (1- si) and j = (1- sj)
        do (cond ((char= c #\L)
                  (when (and (<= 0 (1- j))
                             (char= (aref cwh i (1- j)) #\.))
                    (decf j)))
                 ((char= c #\R)
                  (when (and (< (1+ j) w)
                             (char= (aref cwh i (1+ j)) #\.))
                    (incf j)))
                 ((char= c #\U)
                  (when (and (<= 0 (1- i))
                             (char= (aref cwh (1- i) j) #\.))
                    (decf i)))
                 ((char= c #\D)
                  (when (and (< (1+ i) h)
                             (char= (aref cwh (1+ i) j) #\.))
                    (incf i))))
        finally (format t "~a ~a" (1+ i) (1+ j))))
