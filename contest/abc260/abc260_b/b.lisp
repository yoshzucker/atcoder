(let* ((n (read))
       (x (read))
       (y (read))
       (z (read))
       (an (loop repeat n collect (read)))
       (bn (loop repeat n collect (read)))
       (lst (mapcar #'(lambda (x y z) (list x y z (+ y z)))
                    (loop for i from 1 to n collect i)
                    an
                    bn))
       pass)
  (setf lst (stable-sort lst #'> :key #'second))
  (loop repeat x do (push (first (pop lst)) pass))
  (setf lst (stable-sort (setf lst (sort lst #'< :key #'first))
                         #'> :key #'third))
  (loop repeat y do (push (first (pop lst)) pass))
  (setf lst (stable-sort (setf lst (sort lst #'< :key #'first))
                         #'> :key #'fourth))
  (loop repeat z do (push (first (pop lst)) pass))
  (format t "~{~a~%~}" (sort pass #'<)))
