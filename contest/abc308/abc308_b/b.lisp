(let* ((n (read))
       (m (read))
       (cn (loop repeat n collect (read)))
       (dm (loop repeat m collect (read)))
       (p0 (read))
       (pm (loop repeat m collect (read))))
  (mapcar #'(lambda (x y) (setf cn (substitute x y cn))) pm dm)
  (setf cn (substitute-if p0 #'symbolp cn))
  (print (reduce #'+ cn)))
