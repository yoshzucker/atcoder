(let* ((n (read))
       (g (read))
       (uvg (loop repeat g collect (cons (1- (read)) (1- (read)))))
       (h (read))
       (abh (loop repeat h collect (cons (1- (read)) (1- (read)))))
       (as (make-array (list (1- n) n) :initial-element nil))
       (uvhash (make-hash-table :test #'equalp))
       (abhash (make-hash-table :test #'equalp))
       (sum 0))
  (format t "uvg:~a~%" uvg)
  (format t "abh:~a~%" abh)
  (loop for i below (1- n)
        do (loop for j below (- n i 1)
                 do (setf (aref as i (+ j i 1)) (read))))
  (format t "~a~%" as)
  (loop for (u . v) in uvg
        do (setf (gethash (cons (min u v) (max u v)) uvhash) t))
  (format t "~a ~%" (hash-table-count uvhash))
  (loop for (a . b) in abh
        when (gethash (cons (min a b) (max a b)) uvhash)
          do (remhash (cons (min a b) (max a b)) uvhash)
             (format t "nonsum:~a ~a~%" a b)
        else
          do (incf sum (aref as (min a b) (max a b)))
             (format t "sum:~a ~a~%" a b))
  (format t "~a ~%" (hash-table-count uvhash))
  (format t "~a ~%" sum)
  (loop for k being the hash-key in uvhash
        do (format t "~a ~%" k)
        do (let ((a (car k))
                 (b (cdr k)))
             (format t "~a ~a~%" a b)
             (incf sum (aref as (min a b) (max a b)))))
  (print sum))
